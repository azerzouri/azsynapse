{
	"name": "cc_transrpt",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "azSparky",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/8ad6dfa9-faf9-449e-a7a5-0dc9cda0acf7/resourceGroups/az_sandBox_synapse/providers/Microsoft.Synapse/workspaces/az-sandbox-synapse-analytics/bigDataPools/azSparky",
				"name": "azSparky",
				"type": "Spark",
				"endpoint": "https://az-sandbox-synapse-analytics.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/azSparky",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "2.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": true
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "scala"
					},
					"collapsed": true
				},
				"source": [
					"%%spark\r\n",
					"spark.sql(\"DROP TABLE IF EXISTS clm_claim\")\r\n",
					"spark.sql(\"DROP TABLE IF EXISTS clm_exposure\")\r\n",
					"spark.sql(\"DROP TABLE IF EXISTS clm.claim\")\r\n",
					"spark.sql(\"DROP TABLE IF EXISTS clm.exposure\")\r\n",
					"spark.sql(\"DROP TABLE IF EXISTS claim\")\r\n",
					"spark.sql(\"DROP TABLE IF EXISTS exposure\")"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					},
					"jupyter": {
						"outputs_hidden": true
					}
				},
				"source": [
					"%%pyspark\r\n",
					"df = spark.read.option(\"delimiter\", \"|\").load('abfss://trg@e2nprdadls01.dfs.core.windows.net/synapse/cc_TransParq/parquet/clm.Claim.parquet', format='parquet'\r\n",
					"## If header exists uncomment line below\r\n",
					", header=True\r\n",
					")\r\n",
					"df.write.mode(\"overwrite\").saveAsTable(\"clm_Claim\")\r\n",
					"##display(df.limit(10))\r\n",
					"df.printSchema()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": true
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					},
					"collapsed": true
				},
				"source": [
					"%%pyspark\r\n",
					"from pyspark.sql.functions import *\r\n",
					"\r\n",
					"src_name = ['clm.Claim.parquet','clm.Exposure.parquet']\r\n",
					"for tables in src_name:\r\n",
					"    loc = f\"abfss://trg@e2nprdadls01.dfs.core.windows.net/synapse/cc_TransParq/parquet/{tables}\"\r\n",
					"    spark.sql(f\"CREATE TABLE IF NOT EXISTS {tables} USING PARQUET LOCATION '{loc}'\")"
				],
				"execution_count": 1
			}
		]
	}
}