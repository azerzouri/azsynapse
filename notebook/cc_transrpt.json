{
	"name": "cc_transrpt",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "synsparkdev",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2"
			}
		},
		"metadata": {
			"saveOutput": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/996a3763-53a7-4a9f-b5f1-d0f02df02a11/resourceGroups/sys-aziz_rg/providers/Microsoft.Synapse/workspaces/syn-az-dev/bigDataPools/synsparkdev",
				"name": "synsparkdev",
				"type": "Spark",
				"endpoint": "https://syn-az-dev.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/synsparkdev",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "2.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": true
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					},
					"collapsed": true
				},
				"source": [
					"%%pyspark\r\n",
					"from pyspark.sql.functions import *\r\n",
					"\r\n",
					"def slicer(my_str,sub):\r\n",
					"   index=my_str.find(sub)\r\n",
					"   if index !=-1 :\r\n",
					"         return my_str[1+index:] \r\n",
					"   else :\r\n",
					"         raise Exception('Sub string not found!')\r\n",
					"#######################################\r\n",
					"#######################################\r\n",
					"\r\n",
					"src_name = ['clm.Claim','clm.Exposure']\r\n",
					"for tables in src_name:   \r\n",
					"    spark.sql(\"DROP TABLE IF EXISTS {slicer(tables,'.')}\")\r\n",
					"    loc = f\"abfss://trg@e2nprdadls01.dfs.core.windows.net/synapse/cc_TransParq/parquet/{tables}.parquet\"\r\n",
					"    spark.sql(f\"CREATE TABLE IF NOT EXISTS {slicer(tables,'.')} USING PARQUET LOCATION '{loc}'\")"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					},
					"collapsed": true
				},
				"source": [
					"%%pyspark\r\n",
					"from pyspark.sql.functions import *\r\n",
					"\r\n",
					"spark.sql(\"DROP TABLE IF EXISTS sourcetable\")\r\n",
					"loc = f\"abfss://trg@e2nprdadls01.dfs.core.windows.net/synapse/cc_TransParq/parquet/sourcetable.parquet\"\r\n",
					"spark.sql(f\"CREATE TABLE IF NOT EXISTS sourcetable USING PARQUET LOCATION '{loc}'\")\r\n",
					""
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					},
					"collapsed": true
				},
				"source": [
					"%%pyspark\r\n",
					"from pyspark.sql.functions import *\r\n",
					"\r\n",
					"spark.sql(\"DROP TABLE IF EXISTS sourcetable\")"
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					},
					"collapsed": true
				},
				"source": [
					"%%pyspark\r\n",
					"from notebookutils import mssparkutils\r\n",
					" \r\n",
					"files = mssparkutils.fs.ls('abfss://trg@e2nprdadls01.dfs.core.windows.net/synapse/cc_TransParq/parquet/')\r\n",
					" \r\n",
					"for file in files:\r\n",
					"    filelist = {'filename:' +file.name, 'fileDir:' + str(file.isDir), 'isfile:' + str(file.isFile), 'filepath:'+file.path, 'filesize:' + str(file.size)}\r\n",
					"    print(filelist)"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					},
					"collapsed": true
				},
				"source": [
					"%%pyspark\r\n",
					"from notebookutils import mssparkutils\r\n",
					"\r\n",
					"files = mssparkutils.fs.ls('abfss://trg@e2nprdadls01.dfs.core.windows.net/synapse/cc_TransParq/parquet/')\r\n",
					"\r\n",
					"for file in files:\r\n",
					"    filelist = {'filename:' +file.name, 'fileDir:' + str(file.isDir), 'isfile:' + str(file.isFile), 'filepath:'+file.path, 'filesize:' + str(file.size)}\r\n",
					"    filepath = file.path\r\n",
					"    filename = file.name\r\n",
					"    lsfilename = filename.split(\".\")\r\n",
					"    if 'parquet' in lsfilename:\r\n",
					"        coreFileName = lsfilename[2]\r\n",
					"        print(coreFileName + ' - ' + filename) \r\n",
					"        #writetable(filepath,coreFileName)\r\n",
					"\r\n",
					"\r\n",
					"def writetable(currentFilePath,targetTableName):\r\n",
					"    df = spark.read.parquet(strfilepath)\r\n",
					"    df.write.mode(\"overwrite\").saveAsTable(strfilename)"
				],
				"execution_count": null
			}
		]
	}
}