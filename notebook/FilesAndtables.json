{
	"name": "FilesAndtables",
	"properties": {
		"bigDataPool": {
			"referenceName": "azSparky",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/8ad6dfa9-faf9-449e-a7a5-0dc9cda0acf7/resourceGroups/az_sandBox_synapse/providers/Microsoft.Synapse/workspaces/az-sandbox-synapse-analytics/bigDataPools/azSparky",
				"name": "azSparky",
				"type": "Spark",
				"endpoint": "https://az-sandbox-synapse-analytics.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/azSparky",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "2.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "scala"
					}
				},
				"source": [
					"%%spark\n",
					"val df = spark.read.sqlanalytics(\"azsynapsedw.dbo.CC_Evaluation\") \n",
					"df.write.mode(\"overwrite\").saveAsTable(\"default.CC_Evaluation\")"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					},
					"diagram": {
						"activateDiagramType": 1,
						"chartConfig": {
							"category": "bar",
							"keys": [
								"notification_ID"
							],
							"values": [
								"notification_ID"
							],
							"yLabel": "notification_ID",
							"xLabel": "notification_ID",
							"aggregation": "COUNT",
							"aggByBackend": false
						},
						"aggData": "{\"notification_ID\":{\"1\":1,\"2\":1,\"3\":1,\"\":1,\"990004236 2.5%\":1,\"990004238 1.9453%\":1,\"990004822 2.5%\":1,\"990004893 2.0%\":1,\"990005315 2.5%\":1,\"AOA contributed to an escrow fund in 2015. Per Mendes’ 3Q2020 Fund Status Report, it requests AOA to pay $5,908.70 towards its escrow balance; however, we have elected to become a direct payer. Mendes’ financial database indicates that AOA has a negative balance and owes $2,338.16 in exp. We have not yet received any invoices as a direct payer, but we can expect to be billed for this amount possibly in 1Q 2021.   \":1}}",
						"isSummary": false,
						"previewData": {
							"filter": null
						},
						"isSql": false
					}
				},
				"source": [
					"%%pyspark\n",
					"df = spark.read.option(\"delimiter\", \"|\").load('abfss://trg@e2nprdadls01.dfs.core.windows.net/raw/CashFlow/Notification.csv', format='csv'\n",
					"## If header exists uncomment line below\n",
					", header=True\n",
					")\n",
					"df.write.mode(\"overwrite\").saveAsTable(\"Notification\")\n",
					"\n",
					"\n",
					"##display(df.limit(10))\n",
					"df.printSchema()"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "scala"
					}
				},
				"source": [
					"%%spark\n",
					"val df = spark.read.sqlanalytics(\"azsynapsedw.dbo.CC_Claim\") \n",
					"df.write.mode(\"overwrite\").saveAsTable(\"default.CC_Claim\")"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"diagram": {
						"activateDiagramType": 1,
						"chartConfig": {
							"category": "bar",
							"keys": [
								"notification_ID"
							],
							"values": [
								"notification_ID"
							],
							"yLabel": "notification_ID",
							"xLabel": "notification_ID",
							"aggregation": "COUNT",
							"aggByBackend": false
						},
						"aggData": "{\"notification_ID\":{\"1\":1,\"2\":1,\"3\":1,\"\":1,\"990004236 2.5%\":1,\"990004238 1.9453%\":1,\"990004822 2.5%\":1,\"990004893 2.0%\":1,\"990005315 2.5%\":1,\"AOA contributed to an escrow fund in 2015. Per Mendes’ 3Q2020 Fund Status Report, it requests AOA to pay $5,908.70 towards its escrow balance; however, we have elected to become a direct payer. Mendes’ financial database indicates that AOA has a negative balance and owes $2,338.16 in exp. We have not yet received any invoices as a direct payer, but we can expect to be billed for this amount possibly in 1Q 2021.   \":1}}",
						"isSummary": false,
						"previewData": {
							"filter": null
						},
						"isSql": true
					}
				},
				"source": [
					"%%sql\n",
					"SELECT  * from notification LIMIT 10\n",
					""
				],
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "csharp"
					},
					"collapsed": false
				},
				"source": [
					"%%csharp\n",
					"var accountName = \"e2nprdadls01.dfs.core.windows.net\";\n",
					"var containerName = \"trg\";\n",
					"var file = \"raw/CashFlow/CC_Eval.csv\";\n",
					"\n",
					"// Build the ADLS path to that file\n",
					"var adlsInputPath = $\"abfss://{containerName}@{accountName}/{file}\";\n",
					"var inputReader = spark.Read()\n",
					"    .Option(\"header\", true)\n",
					"    .Option(\"delimiter\", \"|\")\n",
					"    .Option(\"charset\", \"iso-8859-1\");\n",
					"var inputDataFrame = inputReader.Csv(new string[] {adlsInputPath});\n",
					"\n",
					"// Add a unique ID to our movies list\n",
					"inputDataFrame = inputDataFrame\n",
					"    .WithColumn(\"ID\", Expr(\"uuid()\"));\n",
					"//inputDataFrame.Write().Format(\"delta\").Mode(\"overwrite\").Save(inputDataFrame);\n",
					"// Display the DataFrame\n",
					"Display(inputDataFrame);\n",
					"\n",
					"var subDataFrame = inputDataFrame\n",
					"        .Select(\"adjuster\")\n",
					"        .DropDuplicates()\n",
					"        .Filter(\"adjuster != ''\")\n",
					"        .WithColumn(\"SubjectID\", Expr(\"uuid()\"))\n",
					"        .Select(\"SubjectID\", \"adjuster\").OrderBy(\"adjuster\");\n",
					"\n",
					"// Display the DataFrame\n",
					"//Display(subDataFrame);\n",
					"//Save my data back to adls GEN2\n",
					"var containerOutput = \"raw/CashFlow/\";\n",
					"var adlsPathOutput = $\"abfss://{containerName}@{accountName}/{containerOutput}\";\n",
					"subDataFrame.Write().Mode(SaveMode.Overwrite).Option(\"header\", true).Csv(adlsPathOutput +\"adjuster2.csv\");\n",
					""
				],
				"execution_count": 38
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "csharp"
					},
					"collapsed": true
				},
				"source": [
					"%%csharp\r\n",
					"var accountName = \"e2nprdadls01.dfs.core.windows.net\";\r\n",
					"var containerName = \"trg\";\r\n",
					"var file = \"raw/CashFlow/Notification.csv\";\r\n",
					"// Build the ADLS path to that file\r\n",
					"var adlsInputPath = $\"abfss://{containerName}@{accountName}/{file}\";\r\n",
					"var inputReader = spark.Read()\r\n",
					"    .Option(\"header\", true)\r\n",
					"    .Option(\"delimiter\", \"|\")\r\n",
					"    .Option(\"charset\", \"iso-8859-1\");\r\n",
					"var inputDataFrame = inputReader.Csv(new string[] {adlsInputPath});\r\n",
					" //Count words\r\n",
					"    DataFrame words =\r\n",
					"        inputDataFrame\r\n",
					"            .Select(Split(Col(\"comments\"),\" \").Alias(\"words\"))\r\n",
					"            .Select(Explode(Col(\"words\")).Alias(\"word\"))\r\n",
					"            .GroupBy(\"word\")\r\n",
					"            .Count()\r\n",
					"            .OrderBy(Col(\"count\").Desc());\r\n",
					"\r\n",
					"    // Display results\r\n",
					"    words.Show();\r\n",
					""
				],
				"execution_count": 40
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "scala"
					}
				},
				"source": [
					"%%spark\n",
					"spark.sql(\"DROP TABLE IF EXISTS CC_Evaluation\")\n",
					"spark.sql(\"DROP TABLE IF EXISTS Notification\")\n",
					"spark.sql(\"DROP TABLE IF EXISTS CC_Claim\")"
				],
				"execution_count": 4
			}
		]
	}
}